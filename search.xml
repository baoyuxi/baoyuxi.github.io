<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>事件循环</title>
    <url>/2025/02/28/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="事件循环：深入理解-JavaScript-的异步机制"><a href="#事件循环：深入理解-JavaScript-的异步机制" class="headerlink" title="事件循环：深入理解 JavaScript 的异步机制"></a>事件循环：深入理解 JavaScript 的异步机制</h1><span id="more"></span>

<h2 id="什么是事件循环？"><a href="#什么是事件循环？" class="headerlink" title="什么是事件循环？"></a>什么是事件循环？</h2><p>事件循环（Event Loop）是 JavaScript 运行时环境（如浏览器或 Node.js）中处理异步任务的核心机制。它负责管理调用栈（Call Stack）、任务队列（Task Queue）和微任务队列（Microtask Queue）的执行顺序，确保异步代码能够正确执行。</p>
<hr>
<h2 id="1-JS代码在哪里运行"><a href="#1-JS代码在哪里运行" class="headerlink" title="1.JS代码在哪里运行"></a>1.JS代码在哪里运行</h2><p>1.1线程和进程</p>
<p>电脑在运行程序的时候会给每个应用程序开辟一个内存空间，即为进程，可以保证每个程序单独运行互不干扰，如一个办公室中，为每个人都安排单独的工作位置。一个进程中会有一个或者多个</p>
<h3 id="1-调用栈（Call-Stack）"><a href="#1-调用栈（Call-Stack）" class="headerlink" title="1. 调用栈（Call Stack）"></a>1. <strong>调用栈（Call Stack）</strong></h3><p>调用栈是一个后进先出（LIFO）的数据结构，用于存储函数的执行上下文。当一个函数被调用时，它会被推入调用栈；当函数执行完毕后，它会从调用栈中弹出。</p>
<p>javascript</p>
<p>复制</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure>

<p><strong>执行过程：</strong></p>
<ol>
<li><code>bar()</code> 被推入调用栈。</li>
<li><code>foo()</code> 被推入调用栈。</li>
<li><code>console.log(&quot;foo&quot;)</code> 执行并弹出。</li>
<li><code>foo()</code> 执行完毕并弹出。</li>
<li><code>console.log(&quot;bar&quot;)</code> 执行并弹出。</li>
<li><code>bar()</code> 执行完毕并弹出。</li>
</ol>
<hr>
<h3 id="2-任务队列（Task-Queue）"><a href="#2-任务队列（Task-Queue）" class="headerlink" title="2. 任务队列（Task Queue）"></a>2. <strong>任务队列（Task Queue）</strong></h3><p>任务队列用于存储宏任务（Macro Task），例如：</p>
<ul>
<li><code>setTimeout</code></li>
<li><code>setInterval</code></li>
<li>I&#x2F;O 操作</li>
<li>UI 渲染</li>
</ul>
<p>事件循环会从任务队列中取出任务并推入调用栈执行。</p>
<hr>
<h3 id="3-微任务队列（Microtask-Queue）"><a href="#3-微任务队列（Microtask-Queue）" class="headerlink" title="3. 微任务队列（Microtask Queue）"></a>3. <strong>微任务队列（Microtask Queue）</strong></h3><p>微任务队列用于存储微任务（Micro Task），例如：</p>
<ul>
<li><code>Promise.then</code></li>
<li><code>MutationObserver</code></li>
<li><code>queueMicrotask</code></li>
</ul>
<p>微任务的优先级高于宏任务。每次调用栈清空后，事件循环会优先处理微任务队列中的所有任务。</p>
<hr>
<h2 id="事件循环的执行顺序"><a href="#事件循环的执行顺序" class="headerlink" title="事件循环的执行顺序"></a>事件循环的执行顺序</h2><p>事件循环的执行顺序可以总结为以下步骤：</p>
<ol>
<li>执行同步代码（调用栈中的任务）。</li>
<li>调用栈清空后，执行所有微任务。</li>
<li>执行一个宏任务。</li>
<li>重复上述过程。</li>
</ol>
<hr>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>以下是一个示例，展示了事件循环的执行顺序：</p>
<p>javascript</p>
<p>复制</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Timeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Promise.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Promise&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;End&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<p>复制</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">Start</span><br><span class="line"><span class="keyword">End</span></span><br><span class="line">Promise</span><br><span class="line"><span class="keyword">Timeout</span></span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong></p>
<ol>
<li>同步代码 <code>console.log(&quot;Start&quot;)</code> 和 <code>console.log(&quot;End&quot;)</code> 首先执行。</li>
<li>微任务 <code>Promise.then</code> 优先于宏任务 <code>setTimeout</code> 执行。</li>
<li>最后执行宏任务 <code>setTimeout</code>。</li>
</ol>
<hr>
<h2 id="事件循环的常见问题"><a href="#事件循环的常见问题" class="headerlink" title="事件循环的常见问题"></a>事件循环的常见问题</h2><h3 id="1-为什么-Promise-比-setTimeout-先执行？"><a href="#1-为什么-Promise-比-setTimeout-先执行？" class="headerlink" title="1. 为什么 Promise 比 setTimeout 先执行？"></a>1. <strong>为什么 <code>Promise</code> 比 <code>setTimeout</code> 先执行？</strong></h3><p>因为 <code>Promise</code> 是微任务，而 <code>setTimeout</code> 是宏任务。事件循环会优先处理微任务队列中的所有任务，然后再处理宏任务。</p>
<h3 id="2-如何避免事件循环阻塞？"><a href="#2-如何避免事件循环阻塞？" class="headerlink" title="2. 如何避免事件循环阻塞？"></a>2. <strong>如何避免事件循环阻塞？</strong></h3><ul>
<li>避免长时间运行的同步代码。</li>
<li>将耗时任务拆分为多个小任务，使用 <code>setTimeout</code> 或 <code>Promise</code> 分散执行。</li>
</ul>
<h3 id="3-requestAnimationFrame-属于宏任务还是微任务？"><a href="#3-requestAnimationFrame-属于宏任务还是微任务？" class="headerlink" title="3. requestAnimationFrame 属于宏任务还是微任务？"></a>3. <strong><code>requestAnimationFrame</code> 属于宏任务还是微任务？</strong></h3><p><code>requestAnimationFrame</code> 是一个特殊的任务，通常用于动画渲染。它的执行时机介于宏任务和微任务之间。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>事件循环是 JavaScript 异步编程的核心机制。理解调用栈、任务队列和微任务队列的执行顺序，可以帮助我们更好地编写异步代码，避免常见的性能问题。</p>
<hr>
<p>在技术的历史长河中，虽然我们素未谋面，却已相识已久，很微妙也很知足。互联网让世界变得更小，你我之间更近。</p>
<p>在逝去的青葱岁月中，虽然我们未曾相遇，却共同经历着一样的情愫。谁的青春不曾迷茫或焦虑亦是无奈，谁不曾年少过</p>
<p>我是Brain ，千千万万个Brain与你同在，21年计算机专业毕业，毕业后在前端搬砖</p>
<p>如果喜欢我的话，恰巧我也喜欢你的话，让我们手拉手，肩并肩共同前行，相互学习，互相鼓励</p>
]]></content>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
</search>
