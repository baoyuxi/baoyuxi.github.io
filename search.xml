<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>事件循环</title>
    <url>/2025/02/28/hello-world-1/</url>
    <content><![CDATA[<h1 id="前端事件循环：深入理解-JavaScript-的异步机制"><a href="#前端事件循环：深入理解-JavaScript-的异步机制" class="headerlink" title="前端事件循环：深入理解 JavaScript 的异步机制"></a>前端事件循环：深入理解 JavaScript 的异步机制</h1><h2 id="什么是事件循环？"><a href="#什么是事件循环？" class="headerlink" title="什么是事件循环？"></a>什么是事件循环？</h2><p>事件循环（Event Loop）是 JavaScript 运行时环境（如浏览器或 Node.js）中处理异步任务的核心机制。它负责管理调用栈（Call Stack）、任务队列（Task Queue）和微任务队列（Microtask Queue）的执行顺序，确保异步代码能够正确执行。</p>
<hr>
<h2 id="事件循环的核心概念"><a href="#事件循环的核心概念" class="headerlink" title="事件循环的核心概念"></a>事件循环的核心概念</h2><h3 id="1-调用栈（Call-Stack）"><a href="#1-调用栈（Call-Stack）" class="headerlink" title="1. 调用栈（Call Stack）"></a>1. <strong>调用栈（Call Stack）</strong></h3><p>调用栈是一个后进先出（LIFO）的数据结构，用于存储函数的执行上下文。当一个函数被调用时，它会被推入调用栈；当函数执行完毕后，它会从调用栈中弹出。</p>
<p>javascript</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    console.log(&quot;foo&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bar() &#123;</span><br><span class="line">    foo();</span><br><span class="line">    console.log(&quot;bar&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure>

<p><strong>执行过程：</strong></p>
<ol>
<li><code>bar()</code> 被推入调用栈。</li>
<li><code>foo()</code> 被推入调用栈。</li>
<li><code>console.log(&quot;foo&quot;)</code> 执行并弹出。</li>
<li><code>foo()</code> 执行完毕并弹出。</li>
<li><code>console.log(&quot;bar&quot;)</code> 执行并弹出。</li>
<li><code>bar()</code> 执行完毕并弹出。</li>
</ol>
<hr>
<h3 id="2-任务队列（Task-Queue）"><a href="#2-任务队列（Task-Queue）" class="headerlink" title="2. 任务队列（Task Queue）"></a>2. <strong>任务队列（Task Queue）</strong></h3><p>任务队列用于存储宏任务（Macro Task），例如：</p>
<ul>
<li><code>setTimeout</code></li>
<li><code>setInterval</code></li>
<li>I&#x2F;O 操作</li>
<li>UI 渲染</li>
</ul>
<p>事件循环会从任务队列中取出任务并推入调用栈执行。</p>
<hr>
<h3 id="3-微任务队列（Microtask-Queue）"><a href="#3-微任务队列（Microtask-Queue）" class="headerlink" title="3. 微任务队列（Microtask Queue）"></a>3. <strong>微任务队列（Microtask Queue）</strong></h3><p>微任务队列用于存储微任务（Micro Task），例如：</p>
<ul>
<li><code>Promise.then</code></li>
<li><code>MutationObserver</code></li>
<li><code>queueMicrotask</code></li>
</ul>
<p>微任务的优先级高于宏任务。每次调用栈清空后，事件循环会优先处理微任务队列中的所有任务。</p>
<hr>
<h2 id="事件循环的执行顺序"><a href="#事件循环的执行顺序" class="headerlink" title="事件循环的执行顺序"></a>事件循环的执行顺序</h2><p>事件循环的执行顺序可以总结为以下步骤：</p>
<ol>
<li>执行同步代码（调用栈中的任务）。</li>
<li>调用栈清空后，执行所有微任务。</li>
<li>执行一个宏任务。</li>
<li>重复上述过程。</li>
</ol>
<hr>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>以下是一个示例，展示了事件循环的执行顺序：</p>
<p>javascript</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&quot;Start&quot;);</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&quot;Timeout&quot;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">Promise.resolve().then(() =&gt; &#123;</span><br><span class="line">    console.log(&quot;Promise&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&quot;End&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Start</span><br><span class="line">End</span><br><span class="line">Promise</span><br><span class="line">Timeout</span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong></p>
<ol>
<li>同步代码 <code>console.log(&quot;Start&quot;)</code> 和 <code>console.log(&quot;End&quot;)</code> 首先执行。</li>
<li>微任务 <code>Promise.then</code> 优先于宏任务 <code>setTimeout</code> 执行。</li>
<li>最后执行宏任务 <code>setTimeout</code>。</li>
</ol>
<hr>
<h2 id="事件循环的常见问题"><a href="#事件循环的常见问题" class="headerlink" title="事件循环的常见问题"></a>事件循环的常见问题</h2><h3 id="1-为什么-Promise-比-setTimeout-先执行？"><a href="#1-为什么-Promise-比-setTimeout-先执行？" class="headerlink" title="1. 为什么 Promise 比 setTimeout 先执行？"></a>1. <strong>为什么 <code>Promise</code> 比 <code>setTimeout</code> 先执行？</strong></h3><p>因为 <code>Promise</code> 是微任务，而 <code>setTimeout</code> 是宏任务。事件循环会优先处理微任务队列中的所有任务，然后再处理宏任务。</p>
<h3 id="2-如何避免事件循环阻塞？"><a href="#2-如何避免事件循环阻塞？" class="headerlink" title="2. 如何避免事件循环阻塞？"></a>2. <strong>如何避免事件循环阻塞？</strong></h3><ul>
<li>避免长时间运行的同步代码。</li>
<li>将耗时任务拆分为多个小任务，使用 <code>setTimeout</code> 或 <code>Promise</code> 分散执行。</li>
</ul>
<h3 id="3-requestAnimationFrame-属于宏任务还是微任务？"><a href="#3-requestAnimationFrame-属于宏任务还是微任务？" class="headerlink" title="3. requestAnimationFrame 属于宏任务还是微任务？"></a>3. <strong><code>requestAnimationFrame</code> 属于宏任务还是微任务？</strong></h3><p><code>requestAnimationFrame</code> 是一个特殊的任务，通常用于动画渲染。它的执行时机介于宏任务和微任务之间。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>事件循环是 JavaScript 异步编程的核心机制。理解调用栈、任务队列和微任务队列的执行顺序，可以帮助我们更好地编写异步代码，避免常见的性能问题。</p>
]]></content>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2025/02/27/hello-world%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="跨域问题：原因、解决方案与实践"><a href="#跨域问题：原因、解决方案与实践" class="headerlink" title="跨域问题：原因、解决方案与实践"></a>跨域问题：原因、解决方案与实践</h1><h2 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h2><p>跨域（Cross-Origin）是指浏览器出于安全考虑，限制了从一个源（Origin）向另一个源发起的请求。<strong>源</strong>由协议（Protocol）、域名（Domain）和端口（Port）组成。如果两个 URL 的协议、域名或端口不同，就会被认为是跨域请求。</p>
<p>例如：</p>
<ul>
<li><code>http://example.com</code> 和 <code>https://example.com</code>（协议不同）</li>
<li><code>http://example.com</code> 和 <code>http://api.example.com</code>（域名不同）</li>
<li><code>http://example.com</code> 和 <code>http://example.com:8080</code>（端口不同）</li>
</ul>
<hr>
<h2 id="为什么会有跨域限制？"><a href="#为什么会有跨域限制？" class="headerlink" title="为什么会有跨域限制？"></a>为什么会有跨域限制？</h2><p>跨域限制是浏览器的一种安全机制，称为 <strong>同源策略（Same-Origin Policy）</strong>。它的目的是防止恶意网站通过脚本访问其他网站的资源，从而保护用户数据的安全。</p>
<hr>
<h2 id="跨域的表现形式"><a href="#跨域的表现形式" class="headerlink" title="跨域的表现形式"></a>跨域的表现形式</h2><p>跨域问题通常出现在以下场景中：</p>
<ol>
<li><strong>AJAX 请求</strong>：使用 <code>XMLHttpRequest</code> 或 <code>fetch</code> 发起跨域请求。</li>
<li><strong>WebSocket</strong>：跨域的 WebSocket 连接。</li>
<li><strong>嵌入资源</strong>：跨域加载图片、字体、脚本等资源。</li>
</ol>
<hr>
<h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><p>以下是常见的跨域解决方案：</p>
<h3 id="1-CORS（跨域资源共享）"><a href="#1-CORS（跨域资源共享）" class="headerlink" title="1. CORS（跨域资源共享）"></a>1. <strong>CORS（跨域资源共享）</strong></h3><p>CORS（Cross-Origin Resource Sharing）是官方推荐的跨域解决方案。服务器可以通过设置响应头来允许跨域请求。</p>
<p><strong>服务器端设置：</strong></p>
<p>http</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT, DELETE</span><br><span class="line">Access-Control-Allow-Headers: Content-Type, Authorization</span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<ul>
<li><p>允许所有域名访问：</p>
<p>http</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>
</li>
<li><p>允许特定域名访问：</p>
<p>http</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: https://example.com</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="2-JSONP（JSON-with-Padding）"><a href="#2-JSONP（JSON-with-Padding）" class="headerlink" title="2. JSONP（JSON with Padding）"></a>2. <strong>JSONP（JSON with Padding）</strong></h3><p>JSONP 是一种利用 <code>&lt;script&gt;</code> 标签不受同源策略限制的特性来实现跨域请求的方法。</p>
<p><strong>实现原理：</strong></p>
<ol>
<li>前端动态创建一个 <code>&lt;script&gt;</code> 标签，<code>src</code> 指向跨域接口，并附带一个回调函数名。</li>
<li>服务器返回一段 JavaScript 代码，调用前端定义的回调函数。</li>
</ol>
<p><strong>示例：</strong></p>
<p>javascript</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function handleResponse(data) &#123;</span><br><span class="line">    console.log(&quot;Received data:&quot;, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const script = document.createElement(&quot;script&quot;);</span><br><span class="line">script.src = &quot;https://api.example.com/data?callback=handleResponse&quot;;</span><br><span class="line">document.body.appendChild(script);</span><br></pre></td></tr></table></figure>

<p><strong>缺点：</strong></p>
<ul>
<li>仅支持 GET 请求。</li>
<li>安全性较低，容易受到 XSS 攻击。</li>
</ul>
<hr>
<h3 id="3-代理服务器"><a href="#3-代理服务器" class="headerlink" title="3. 代理服务器"></a>3. <strong>代理服务器</strong></h3><p>通过在同域下设置一个代理服务器，将跨域请求转发到目标服务器。</p>
<p><strong>实现方式：</strong></p>
<ol>
<li>前端请求同域的代理服务器。</li>
<li>代理服务器将请求转发到目标服务器，并将响应返回给前端。</li>
</ol>
<p><strong>示例：</strong></p>
<ul>
<li><p>使用 Nginx 配置代理：</p>
<p>nginx</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location /api/ &#123;</span><br><span class="line">        proxy_pass https://api.example.com/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="4-WebSocket"><a href="#4-WebSocket" class="headerlink" title="4. WebSocket"></a>4. <strong>WebSocket</strong></h3><p>WebSocket 协议本身支持跨域通信，但服务器需要显式允许跨域连接。</p>
<p><strong>示例：</strong></p>
<p>javascript</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const socket = new WebSocket(&quot;wss://api.example.com&quot;);</span><br><span class="line"></span><br><span class="line">socket.onopen = () =&gt; &#123;</span><br><span class="line">    console.log(&quot;WebSocket connection established&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.onmessage = (event) =&gt; &#123;</span><br><span class="line">    console.log(&quot;Received message:&quot;, event.data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-postMessage"><a href="#5-postMessage" class="headerlink" title="5. postMessage"></a>5. <strong>postMessage</strong></h3><p><code>postMessage</code> 是 HTML5 提供的一种跨域通信方法，适用于窗口之间的通信。</p>
<p><strong>示例：</strong></p>
<p>javascript</p>
<p>复制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 发送消息</span><br><span class="line">const targetWindow = window.open(&quot;https://example.com&quot;);</span><br><span class="line">targetWindow.postMessage(&quot;Hello&quot;, &quot;https://example.com&quot;);</span><br><span class="line"></span><br><span class="line">// 接收消息</span><br><span class="line">window.addEventListener(&quot;message&quot;, (event) =&gt; &#123;</span><br><span class="line">    if (event.origin === &quot;https://example.com&quot;) &#123;</span><br><span class="line">        console.log(&quot;Received message:&quot;, event.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="跨域问题的调试技巧"><a href="#跨域问题的调试技巧" class="headerlink" title="跨域问题的调试技巧"></a>跨域问题的调试技巧</h2><ol>
<li><strong>浏览器控制台</strong>：<ul>
<li>查看跨域请求的错误信息。</li>
<li>检查请求头和响应头是否符合 CORS 要求。</li>
</ul>
</li>
<li><strong>工具</strong>：<ul>
<li>使用 Postman 或 curl 测试接口，排除前端代码问题。</li>
<li>使用代理工具（如 Charles 或 Fiddler）分析请求和响应。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>跨域问题是前端开发中的常见挑战，但通过 CORS、JSONP、代理服务器等技术，我们可以有效地解决跨域限制。在实际开发中，应根据具体场景选择合适的解决方案。</p>
]]></content>
  </entry>
</search>
