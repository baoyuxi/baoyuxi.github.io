<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>事件循环</title>
    <url>/2025/02/28/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="事件循环：深入理解-JavaScript-的异步机制"><a href="#事件循环：深入理解-JavaScript-的异步机制" class="headerlink" title="事件循环：深入理解 JavaScript 的异步机制"></a>事件循环：深入理解 JavaScript 的异步机制</h1><span id="more"></span>

<h2 id="什么是事件循环？"><a href="#什么是事件循环？" class="headerlink" title="什么是事件循环？"></a>什么是事件循环？</h2><p>**事件循环（Event Loop）**是 JavaScript 运行时环境（如浏览器或 Node.js）中处理异步任务的核心机制。它通过协调任务的执行顺序，确保异步代码能够以正确的顺序执行，同时避免阻塞主线程。</p>
<hr>
<h2 id="1-JS-代码在哪里运行？"><a href="#1-JS-代码在哪里运行？" class="headerlink" title="1. JS 代码在哪里运行？"></a>1. JS 代码在哪里运行？</h2><h3 id="1-1-线程与进程"><a href="#1-1-线程与进程" class="headerlink" title="1.1 线程与进程"></a>1.1 线程与进程</h3><p>在计算机中，<strong>进程</strong>是程序运行的基本单位。每个进程都有独立的内存空间，确保程序之间互不干扰。可以把进程想象成一个办公室，每个办公室都是独立的，互不影响。</p>
<p>而<strong>线程</strong>是进程中的执行单元。一个进程可以包含多个线程，每个线程负责不同的任务。比如，一个办公室中，每个员工都有自己的工位和工具（线程），负责不同的工作。</p>
<h3 id="1-2-浏览器的多进程架构"><a href="#1-2-浏览器的多进程架构" class="headerlink" title="1.2 浏览器的多进程架构"></a>1.2 浏览器的多进程架构</h3><p>浏览器是一个复杂的应用程序，它采用<strong>多进程架构</strong>来管理不同的任务。常见的浏览器进程包括：</p>
<ul>
<li><strong>浏览器进程</strong>：负责浏览器的界面显示、用户交互（如地址栏、书签）等。</li>
<li><strong>网络进程</strong>：负责网络资源的加载（如 HTML、CSS、JS 文件）。</li>
<li><strong>渲染进程</strong>：负责页面的渲染和 JavaScript 的执行。</li>
<li><strong>GPU 进程</strong>：负责处理图形渲染任务（如 CSS 动画、3D 效果）。</li>
</ul>
<p>这种多进程设计确保了浏览器的稳定性和高效性。即使某个进程崩溃（如渲染进程卡死），也不会影响其他进程的运行。</p>
<h3 id="1-3-渲染进程与渲染主线程"><a href="#1-3-渲染进程与渲染主线程" class="headerlink" title="1.3 渲染进程与渲染主线程"></a>1.3 渲染进程与渲染主线程</h3><p><strong>渲染进程</strong>是浏览器中最重要的进程之一，它负责将 HTML、CSS 和 JavaScript 转换为用户可见的页面。在渲染进程中，有一个<strong>渲染主线程</strong>，它是 JavaScript 代码运行的地方。</p>
<p>渲染主线程不仅负责执行 JavaScript，还负责以下任务：</p>
<ul>
<li>解析 HTML 和 CSS</li>
<li>计算样式和布局</li>
<li>绘制页面</li>
</ul>
<p>由于渲染主线程需要处理这么多任务，如果 JavaScript 代码执行时间过长，就会阻塞页面的渲染，导致页面卡顿。因此，理解 JavaScript 的执行机制至关重要。</p>
<hr>
<h2 id="2-JS-代码的执行机制"><a href="#2-JS-代码的执行机制" class="headerlink" title="2. JS 代码的执行机制"></a>2. JS 代码的执行机制</h2><h3 id="2-1-单线程与事件循环"><a href="#2-1-单线程与事件循环" class="headerlink" title="2.1 单线程与事件循环"></a>2.1 单线程与事件循环</h3><p><strong>JS是一门单线程的语言</strong>，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。</p>
<p>而渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中运行。</p>
<p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。</p>
<p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。</p>
<p><strong>即为JavaScript 引入的事件循环（Event Loop）机制</strong></p>
<p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p>
<p>在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p>
<p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p>
<p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p>
<p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p>
<h3 id="2-2-宏任务队列与微任务队列"><a href="#2-2-宏任务队列与微任务队列" class="headerlink" title="2.2 宏任务队列与微任务队列"></a>2.2 宏任务队列与微任务队列</h3><p>在事件循环中，任务分为两种：</p>
<ul>
<li><strong>宏任务（Macro Task）</strong>：包括 <code>setTimeout</code>、<code>setInterval</code>、<code>I/O</code> 操作、UI 渲染等。这些任务会被放入宏任务队列中，等待事件循环的下一个周期执行。</li>
<li><strong>微任务（Micro Task）</strong>：包括 <code>Promise</code> 的回调、<code>MutationObserver</code> 等。这些任务会被放入微任务队列中，在当前宏任务执行完毕后立即执行，且优先级高于宏任务。</li>
</ul>
<p>事件循环的工作流程如下：</p>
<ol>
<li>执行当前渲染主线程上的任务。</li>
<li>渲染主线程执行所有微任务。</li>
<li>渲染主线程执行所有宏任务。</li>
<li>重复上述过程。</li>
</ol>
<h3 id="2-3-代码示例"><a href="#2-3-代码示例" class="headerlink" title="2.3 代码示例"></a>2.3 代码示例</h3><p>以下是一个示例，展示了事件循环的执行顺序：</p>
<p>javascript</p>
<p>复制</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Timeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);  <span class="comment">//由渲染主线程交给定时线程，定时线程完成后将回调函数打包为任务放到宏任务队列</span></span><br><span class="line"></span><br><span class="line">Promise.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Promise&quot;</span>);</span><br><span class="line">&#125;);    <span class="comment">//由渲染主线程会直接将其放到微任务队列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;End&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<p>复制</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">Start</span><br><span class="line"><span class="keyword">End</span></span><br><span class="line">Promise</span><br><span class="line"><span class="keyword">Timeout</span></span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong></p>
<ol>
<li><p>同步代码 <code>console.log(&quot;Start&quot;)</code> 和 <code>console.log(&quot;End&quot;)</code> 首先执行。</p>
</li>
<li><p>微任务 <code>Promise.then</code> 优先于宏任务 <code>setTimeout</code> 执行。</p>
</li>
<li><p>最后执行宏任务 <code>setTimeout</code>。</p>
<p>注： <strong><code>Promise.resolve().then()</code> 的执行过程</strong></p>
<ul>
<li><strong><code>Promise.resolve()</code></strong>：<ul>
<li>创建一个立即解决的 Promise 对象。</li>
</ul>
</li>
<li><strong><code>.then()</code></strong>：<ul>
<li>将传入的回调函数（<code>() =&gt; &#123; console.log(&quot;Promise&quot;); &#125;</code>）放入 <strong>微任务队列</strong>。</li>
</ul>
</li>
<li><strong>执行时机</strong>：<ul>
<li>微任务队列中的任务会在当前 <strong>渲染主线程上任务都执行完毕后</strong> 立即执行，且会在 <strong>下一个宏任务之前</strong> 执行。</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="3-异步编程"><a href="#3-异步编程" class="headerlink" title="3. 异步编程"></a>3. 异步编程</h2><p>由于 JavaScript 的单线程特性，异步编程成为了处理耗时操作的关键。常见的异步编程方式包括：</p>
<ul>
<li><strong>回调函数</strong>：最早的异步编程方式，但容易导致“回调地狱”（Callback Hell）。</li>
<li><strong>Promise</strong>：ES6 引入的异步编程解决方案，提供了更清晰的链式调用方式。</li>
<li><strong>async&#x2F;await</strong>：ES7 引入的语法糖，基于 Promise，使异步代码看起来像同步代码，进一步简化了异步编程。</li>
</ul>
<h3 id="3-1-Web-Workers"><a href="#3-1-Web-Workers" class="headerlink" title="3.1 Web Workers"></a>3.1 Web Workers</h3><p>虽然 JavaScript 是单线程的，但浏览器提供了 <strong>Web Workers</strong> 机制，允许在后台运行脚本，执行一些计算密集型任务，而不会阻塞主线程。Web Workers 运行在独立的线程中，与主线程通过消息传递进行通信。</p>
<hr>
<h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4. 常见问题"></a>4. 常见问题</h2><h3 id="4-1-为什么-JavaScript-代码会阻塞浏览器渲染？"><a href="#4-1-为什么-JavaScript-代码会阻塞浏览器渲染？" class="headerlink" title="4.1 为什么 JavaScript 代码会阻塞浏览器渲染？"></a>4.1 为什么 JavaScript 代码会阻塞浏览器渲染？</h3><p>JavaScript 代码会阻塞浏览器渲染的原因在于 <strong>浏览器的渲染主线程是单线程的</strong>，而 JavaScript 代码的执行和浏览器的渲染（如样式计算、布局、绘制等）都在这个线程中进行。如果 JavaScript 代码执行时间过长，就会占用渲染主线程，导致浏览器无法及时执行渲染任务，从而造成页面卡顿或“冻结”的现象。</p>
<h4 id="渲染主线程的工作机制"><a href="#渲染主线程的工作机制" class="headerlink" title="渲染主线程的工作机制"></a>渲染主线程的工作机制</h4><p>浏览器的<strong>渲染主线程</strong>负责以下任务：</p>
<ul>
<li><strong>执行 JavaScript 代码</strong></li>
<li><strong>解析 HTML 和 CSS</strong></li>
<li><strong>计算样式和布局</strong></li>
<li><strong>绘制页面</strong></li>
</ul>
<p>这些任务都是<strong>串行执行</strong>的，即同一时间只能执行一个任务。如果 JavaScript 代码正在执行，渲染任务就必须等待，直到 JavaScript 代码执行完毕。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>事件循环是 JavaScript 异步编程的核心机制。理解调用栈、任务队列和微任务队列的执行顺序，可以帮助我们更好地编写异步代码，避免常见的性能问题。</p>
<p>在实际开发中，我们应尽量避免长时间运行的同步任务，合理使用异步编程（如 <code>Promise</code>、<code>async/await</code>），并充分利用浏览器的多线程能力（如 Web Workers）来提升应用性能。</p>
<hr>
<p>在技术的历史长河中，虽然我们素未谋面，却已相识已久，很微妙也很知足。互联网让世界变得更小，你我之间更近。</p>
<p>在逝去的青葱岁月中，虽然我们未曾相遇，却共同经历着一样的情愫。谁的青春不曾迷茫或焦虑亦是无奈，谁不曾年少过。</p>
<p>我是 Brain，千千万万个 Brain 与你同在，21 年计算机专业毕业，毕业后在前端搬砖。如果喜欢我的话，恰巧我也喜欢你的话，让我们手拉手，肩并肩共同前行，相互学习，互相鼓励。</p>
]]></content>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
</search>
